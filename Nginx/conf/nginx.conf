#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    # nginx是否调用sendfile函数来输出文件,该函数使用0复制模式
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    # 处理客户端请求中buffer大小,用来处理post提交数据或文件上传等
    # client_body_buffer_size 1M

    # 负载均衡锁,默认开启
    # accept_mutex on;

    # 开启静态文件压缩功能.放到全局配置或某个server中也行
    gzip on;
    # 指定缓存压缩应答的缓冲区数量和大小,如果不设置,一个缓存区的大小为分页大小,可能是4k或8k
    gzip_buffers 32 4K;
    # 指定压缩等级,从1到9,1为最小化压缩,处理速度快;9为最大化压缩,处理速度慢
    gzip_comp_level 6;
    # 设置被压缩的最小请求,单位为bytes,少于该值的请求将不会压缩,由请求中的content-length决定
    gzip_min_length 100;
    gzip_types application/javascript text/css text/xml;
    # 配置禁用gzip条件,支持正则.此处表示ie6及以下不启用gzip,因为ie低版本不支持
    gzip_disable "MSIE [1-6]\.";
    gzip_vary on;
    
    # api是需要在使用负载均衡的server属性中增加的,如proxy_pass http://api;写在location中
    upstream api{
    	server 127.0.0.1:8080;
        server 127.0.0.1:8081;
    	# down:当前的server不参与负载均衡
    	# server 127.0.0.1:8080 down;
    	# weight:权重,默认为1,weight越大,负载的权重就越大,该服务被访问的几率就越大
    	# server 127.0.0.1:8080 weight=2;
    	# max_fails:允许请求失败的次数默认为1.当超过最大次数时,返回proxy_next_upstream模块定义的错误
    	# fail_timeout:max_fails次失败后,暂停的时间
    	# server 127.0.0.1:8080 max_fails=2 fail_timeout=30s;
    	# backup:其它所有的非backup机器down或者忙的时候,请求的backup机器,所以这台机器压力会最轻
    }

    upstream static{
        server 127.0.0.1:8082;
        server 127.0.0.1:8083;
    }

    server {
        listen       80;
        # 监听多个端口
        # listen       90;
        server_name  localhost 127.0.0.1;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        # 指定错误代码的请求重定向到指定页面
        error_page   404 500 502 503 504  /50x.html;
        location = /50x.html {
            # 设置根目录地址,结尾可带/也不可不带;如果是alias,结尾必须带/
            root   html;
        }

        # 主API负载均衡
        location /api{
            # 设置代理地址
            proxy_pass http://api/;
            # 写上域名是防止某些服务器禁止ip访问.若不禁止ip访问,也可以写ip.$host是域名地址,内置函数
            proxy_set_header Host $host;
            # 将请求的真实IP传递到后台
            proxy_set_header X-Forwared-For $remote_addr;
            # 如果产生故障,自动访问下个服务器
            # proxy_next_upstream http_502 http_500 timeout;
            # 简单的限制下载速度
            # limit_rate 256K;
        }

        # 简单的防盗链,也可以使用插件
        location /api{
            # valid_referers:可以允许访问的域名或请求头Referer中允许的字段,其他不允许访问
            valid_referers *.host.com;
            # 若果不是指定地址的请求,重定向到指定页面
            if($invalid_referer){
                rewrite ^/ http://localhost:8090;
            }
        }

        # 静态资源负载均衡
        location ~.*\.(jpg|png|jpeg|js|css|html|vue|mp3|mp4|avi|rmvb|txt)$ {
            proxy_pass http://static/;
        }

        # if的使用,~表示使用正则匹配.方法体中的return只能返回指定的code码,如204,400等
        # 如若是IE浏览器,就跳到指定地址
        if ($http_user_agent ~ MSIE){
            rewrite ^(.*)$ /msie/$1 break;
        }
        # 如果cookie中有以id开头的参数
        if($http_cookie ~ *"id=([^;]+)(?:;|$)"){
            # 将id的值设置到变量中,set为关键字
            set $id = $1;
        }
        # 判断请求类型
        if($http_method=GET){
            return 405;
        }
        # 判断文件,目录是否存在,判断文件是否可执行
        if(!-f $request_filename){

        }
        if(!-d $request_filename){

        }
        if(!-x $request_filename){

        }
        # 判断文件,目录或链接符号是否存在
        if(!-e $request_filename){

        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
	
	# 扫描指定目录下的所有后缀为conf的nginx配置文件并加载到当前配置中,被扫描的文件中可以只有server
	# includes /app/nginx/conf/*.conf
}