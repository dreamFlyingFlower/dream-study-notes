<?xml version="1.0" encoding="UTF-8"?>

<!-- port:端口,shutdown:关闭命令 -->
<Server port="8005" shutdown="SHUTDOWN">

	<!-- 以日志形式输出服务器,操作系统,JVM版本 -->
	<Listener className="org.apache.catalina.startup.VersionLoggerListener" />
	<!-- Security listener. Documentation at /docs/config/listeners.html <Listener className="org.apache.catalina.security.SecurityListener" 
		/> -->
	<!--APR library loader. Documentation at /docs/apr.html -->

	<!-- 加载和销毁APR,如果找不到APR库,则会输出日志,不影响Tomcat启动 -->
	<Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
	<!-- Prevent memory leaks due to use of particular java/javax APIs -->
	<!-- 避免JVM内存泄漏问题 -->
	<Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
	<!-- 加载和销毁全局命名服务,通过GlobalNamingResources标签 -->
	<Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
	<!-- 在Context停⽌时重建 Executor 池中的线程,以避免ThreadLocal 相关的内存泄漏 -->
	<Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

	<!-- Global JNDI resources Documentation at /docs/jndi-resources-howto.html -->
	<GlobalNamingResources>
		<!-- Editable user database that can also be used by UserDatabaseRealm to authenticate users -->
		<Resource name="UserDatabase" auth="Container" type="org.apache.catalina.UserDatabase"
			description="User database that can be updated and saved"
			factory="org.apache.catalina.users.MemoryUserDatabaseFactory" pathname="conf/tomcat-users.xml" />
	</GlobalNamingResources>

	<!-- A "Service" is a collection of one or more "Connectors" that share a single "Container" Note: A "Service" is not itself 
		a "Container", so you may not define subcomponents such as "Valves" at this level. Documentation at /docs/config/service.html -->

	<!-- 该标签用于创建 Service 实例,默认使用 org.apache.catalina.core.StandardService,Tomcat仅指定了Service 的名称, 值为Catalina -->
	<!-- Service子标签: -->
	<!-- Listener用于为Service添加生命周期监听器 -->
	<!-- Executor用于配置Service共享线程池 -->
	<!-- Connector用于配置Service包含的链接器 -->
	<!-- Engine用于配置Service中链接器对应的Servlet 容器引擎 -->
	<Service name="Catalina">

		<!--The connectors can use a shared executor, you can define one or more named thread pools -->
		<!-- 配置线程池: -->
		<!-- name:线程池名称,用于Connector中指定 -->
		<!-- namePrefix:所创建的每个线程的名称前缀,一个单独的线程名称为namePrefix+threadNumber -->
		<!-- maxThreads:池中最大线程数,默认200 -->
		<!-- minSpareThreads:活跃线程数,也就是核心池线程数,这些线程不会被销毁,会⼀直存在,默认10 -->
		<!-- maxIdleTime:线程空闲时间,超过该时间后,空闲线程会被销毁,默认值为6000(1分钟),单位毫秒 -->
		<!-- maxQueueSize:在被执行前最大线程队列数,默认为Int的最大值.除非特殊情况,这个值不需要更改,否则会有请求不会被处理的情况发生 -->
		<!-- prestartminSpareThreads:启动线程池时是否启动 minSpareThreads部分线程.默认false,不启动 -->
		<!-- threadPriority:线程池中线程优先级,默认值为5,值从1到10 -->
		<!-- className:线程池实现类,默认为org.apache.catalina.core.StandardThreadExecutor.如果想使用自定义线程池,先要实现org.apache.catalina.Executor接口 -->
		<Executor name="tomcatThreadPool" namePrefix="catalina-exec-" maxThreads="300" minSpareThreads="15" />

		<!-- A "Connector" represents an endpoint by which requests are received and responses are returned. Documentation at : 
			Java HTTP Connector: /docs/config/http.html Java AJP Connector: /docs/config/ajp.html APR (HTTP/AJP) Connector: /docs/apr.html 
			Define a non-SSL/TLS HTTP/1.1 Connector on port 8080 -->

		<!-- Connector标签用于创建链接器实例 -->
		<!-- 默认情况下,server.xml 配置了两个链接器,一个支持HTTP协议,一个支持AJP协议 -->
		<!-- 大多数情况下,并不需要新增链接器配置,只是根据需要对已有链接器进行优化 -->
		<!-- port:端口号,Connector用于创建服务端Socket 并进行监听,以等待客户端请求链接.如果该属性设置为0,Tomcat将会随机选择一个可用的端口 -->
		<!-- protocol:支持的协议,默认为 HTTP/1.1,并采用自动切换机制选择一个基于NIO的链接器或基于APR的链接器(根据本地是否含有Tomcat的本地库判定) -->
		<!-- connectionTimeOut:Connector接收链接后的等待超时时间,单位为毫秒.-1 表示不超时 -->
		<!-- redirectPort:当前Connector不支持SSL请求,接收到了一个请求,并且也符合security-constraint约束,需要SSL传输,Catalina自动将请求重定向到指定的端口 -->
		<!-- executor:指定共享线程池的名称,也可以通过maxThreads,minSpareThreads 等属性配置内部线程池 -->
		<!-- URIEncoding:用于指定编码URI的字符编码,Tomcat8.x版本默认的编码为 UTF-8,Tomcat7.x版本默认为ISO-8859-1 -->
		<Connector port="8080" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" />

		<!-- 使用线程池配置,A "Connector" using the shared thread pool -->
		<!-- <Connector executor="tomcatThreadPool" port="8080" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" 
			/> -->

		<!-- 使用NIO2协议,默认是NIO协议 -->
		<!-- <Connector executor="tomcatThreadPool" port="8080" protocol="org.apache.coyote.http11.Http11Nio2Protocol" connectionTimeout="20000" 
			redirectPort="8443" /> -->

		<!-- 使用HTTPS协议配置端口,Define a SSL/TLS HTTP/1.1 Connector on port 8443 This connector uses the NIO implementation. The default 
			SSLImplementation will depend on the presence of the APR/native library and the useOpenSSL attribute of the AprLifecycleListener. 
			Either JSSE or OpenSSL style configuration may be used regardless of the SSLImplementation selected. JSSE style configuration 
			is used below. -->
		<!-- <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol" maxThreads="150" SSLEnabled="true"> <SSLHostConfig> 
			<Certificate certificateKeystoreFile="conf/localhost-rsa.jks" type="RSA" /> </SSLHostConfig> </Connector> -->

		<!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443 with HTTP/2 This connector uses the APR/native implementation which 
			always uses OpenSSL for TLS. Either JSSE or OpenSSL style configuration may be used. OpenSSL style configuration is used 
			below. -->

		<!-- <Connector port="8443" protocol="org.apache.coyote.http11.Http11AprProtocol" maxThreads="150" SSLEnabled="true" > 
			<UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol" /> <SSLHostConfig> <Certificate certificateKeyFile="conf/localhost-rsa-key.pem" 
			certificateFile="conf/localhost-rsa-cert.pem" certificateChainFile="conf/localhost-rsa-chain.pem" type="RSA" /> </SSLHostConfig> 
			</Connector> -->

		<!-- Define an AJP 1.3 Connector on port 8009 -->
		<!-- 屏蔽AJP协议,有漏洞 -->
		<!-- <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /> -->

		<!-- An Engine represents the entry point (within Catalina) that processes every request. The Engine implementation for 
			Tomcat stand alone analyzes the HTTP headers included with the request, and passes them on to the appropriate Host (virtual 
			host). Documentation at /docs/config/engine.html -->

		<!-- You should set jvmRoute to support load-balancing via AJP ie : <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1"> -->
		<!-- name:用于指定Engine的名称,默认为Catalina -->
		<!-- defaultHost:默认使用的虚拟主机名称,当客户端请求指向的主机无效时,将交由默认的虚拟主机处理,默认为localhost -->
		<Engine name="Catalina" defaultHost="localhost">

			<!--For clustering, please take a look at documentation at: /docs/cluster-howto.html (simple how to) /docs/config/cluster.html 
				(reference documentation) -->
			<!-- <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/> -->

			<!-- Use the LockOutRealm to prevent attempts to guess user passwords via a brute-force attack -->
			<Realm className="org.apache.catalina.realm.LockOutRealm">
				<!-- This Realm uses the UserDatabase configured in the global JNDI resources under the key "UserDatabase". Any edits 
					that are performed against this UserDatabase are immediately available for use by the Realm. -->
				<Realm className="org.apache.catalina.realm.UserDatabaseRealm" resourceName="UserDatabase" />
			</Realm>

			<!-- 配置虚拟主机 -->
			<!-- 1外网访问的第一种配置方式,直接将war包放在appBase指定的目录下 -->
			<Host name="localhost" appBase="webapps" unpackWARs="true" autoDeploy="true">

				<!-- Context 标签用于配置⼀个Web应用 -->
				<!-- docBase:Web用用目录或War包的部署路径.可以是绝对路径,也可以是相对于Host appBase的相对路径 -->
				<!-- path:Web应用的Context路径.如果Host名为localhost,则该web应用访问的根路径为:http://localhost:8080/web_demo -->
				<!-- 2外网访问的第二种配置方式,若存在第二种,则覆盖第一种方式.配置虚拟路径,可随意指定本地文件夹地址 -->
				<Context docBase="本地目录" path="外网访问资源目录地址"></Context>

				<!-- 3第三种配置方式:根据本文件的Engine的name属性,在conf文件夹中新建该与该属性值同名的文件夹 -->
				<!-- 然后在新建的文件夹中新建一个以需要进行访问的ip地址或域名问名称的文件夹, -->
				<!-- 在该文件夹中新建一个任意名称.xml 在任意名称.xml中配置的方式与第二种相同, -->
				<!-- 只不过Context标签单独存在,且只需要写该标签,但是该属性不需要path, -->
				<!-- 因为访问该路径的是该文件的名称,即context ex:<Context docBase="本地目录"/> -->
				<!-- 访问:localhost:8080/任意名称/啥啥啥.html -->

				<!-- SingleSignOn valve, share authentication between web applications Documentation at: /docs/config/valve.html -->
				<!-- <Valve className="org.apache.catalina.authenticator.SingleSignOn" /> -->

				<!-- Access log processes all example. Documentation at: /docs/config/valve.html Note: The pattern used is equivalent 
					to using pattern="common" -->
				<Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs" prefix="localhost_access_log"
					suffix=".txt" pattern="%h %l %u %t &quot;%r&quot; %s %b" />

			</Host>
		</Engine>
	</Service>
</Server>